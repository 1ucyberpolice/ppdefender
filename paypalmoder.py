import asyncio
import logging
import random
import time

import aioschedule

import requests
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from filters import IsAdminFilter
import telebot

storage = MemoryStorage()

logging.basicConfig(level=logging.INFO)
from config import TOKEN
bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=storage)

dp.filters_factory.bind(IsAdminFilter)


class AdminPanel(StatesGroup):
    paypal = State()


class AdminPanel1(StatesGroup):
    notification_admin_panel = State()


text = '[üí∏–ö–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Çüí∏](https://t.me/joinchat/ZJWZj5mCEog4NmQy)'
toolID = [
    'None',
    'None',
    '3'
]
kasima = [
    '–ß–µ–ø—É—Ö–∞',
    '–õ—É—á—à–µ –±—ã –º–æ–ª—á–∞–ª...',
    '–ù—É –∏ –±—Ä–µ–¥',
    '–õ—É—á—à–µ –±—ã –≤–æ—Ä–∫–∞–ª...',
    '–ù–∏—á–µ–≥–æ —É–º–Ω–µ–µ –æ—Ç —Ç–µ–±—è –Ω–µ –æ–∂–∏–¥–∞–ª —É—Å–ª—ã—à–∞—Ç—å...',
    '–ò–∑ –Ω–∞—Å –¥–≤–æ–∏—Ö –±–æ—Ç–æ–º –∫–∞–∂–µ—à—å—Å—è —Ç—ã',
    '–ù–µ –ø–∏—à–∏ —Å—é–¥–∞ –±–æ–ª—å—à–µ –ø–∂'
]
victimID = [
    '1'
]

addedpp = """_–ü–∞–ª–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –æ–∂–∏–¥–∞–π—Ç–µ –∞–¥–º–∏–Ω–æ–≤‚ùïÔ∏è_
"""
added_notification = """
<i>–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã‚ùïÔ∏èüï∞</i>
"""
disput = """
‚ô†Ô∏è–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞‚ô†Ô∏è
           ‚ö°ùêèùêöùê≤ùêèùêöùê• ùêíùê™ùêÆùêöùêù‚ö°
            –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç‚ùïÔ∏è
_ –ó–∞ –¥–∏—Å–ø—É—Ç—ã –±—É–¥–µ–º —à—Ç—Ä–∞—Ñ–æ–≤–∞—Ç—å
–∏ –Ω–µ –≤—ã–ø–ª–∞—á–∏–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏—Ç—ã!_
"""
disput2 = """
_1. –ù–µ –≥–æ–≤–æ—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é, —á—Ç–æ
–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –ø–æ—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ —á–∞—Å, –¥–≤–∞.
2. –ü–æ—Å–ª–µ –ø—Ä–æ—Ñ–∏—Ç–∞ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ 
—Å–µ–±—è.
3. –û—Ç–≤–µ—á–∞–π—Ç–µ –∏–º, –¥–µ—Ä–∂–∏—Ç–µ –∏—Ö –≤–ø–ª–æ—Ç—å
–¥–æ –≤—ã–≤–æ–¥–∞.
4. –ù–µ –¥–æ–ø—É—Å–∫–∞–π—Ç–µ –±–∞–Ω–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤._"""

kassaEuro = ['1']
euroFinder = ['‚Ç¨']
userFinder = ['@']
userSymbol = ['–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω', '2']
euroNoSymbol = ['0']
euroN = [0]
profits = [0]
recordEuro = [2108]
euroResult = [0]
euroKassa = [0]
channelPost = ['1']

ppAnswer = [addedpp]
notificationAnswer = [disput2]

one_hour_cancel = [0]

publish_post_markup = types.InlineKeyboardMarkup()
topublish = types.InlineKeyboardButton('‚úÖ', callback_data='topublish')
tonopublish = types.InlineKeyboardButton('üö´', callback_data='tonopublish')
publish_post_markup.add(topublish, tonopublish)

markup_inline_choice = types.InlineKeyboardMarkup()
addPP = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å PP', callback_data='add')
addNotiication = types.InlineKeyboardButton('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', callback_data='notification')
markup_inline_choice.add(addPP)
markup_inline_choice.add(addNotiication)

hour_inline_choice = types.InlineKeyboardMarkup()
switch_on = types.InlineKeyboardButton('–í–∫–ª—é—á–∏—Ç—å', callback_data='switch_on')
hour_inline_choice.add(switch_on)

markup_manuals = types.InlineKeyboardMarkup()
manual = types.InlineKeyboardButton('üéì–ú–∞–Ω—É–∞–ª—ãüéì', callback_data='manual')
markup_manuals.add(manual)

manual_markup = types.InlineKeyboardMarkup()
first = types.InlineKeyboardButton('üìö–†–∞–±–æ—Ç–∞ —Å PayPal|Vinted',
                                   url='https://telegra.ph/%F0%9D%90%8F%F0%9D%90%9A%F0%9D%90%B2%F0%9D%90%8F%F0%9D%90'
                                       '%9A%F0%9D%90%A5-%F0%9D%90%92%F0%9D%90%AA%F0%9D%90%AE%F0%9D%90%9A%F0%9D%90%9D'
                                       '--Podrobnyj-manual-10-06-16')

third = types.InlineKeyboardButton('–û–±—Ä–∞—Ç–Ω–æ', callback_data='return')
manual_markup.add(first)
manual_markup.add(third)

new_member = """
üçÄ–ö —á–∞—Ç—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –≤–æ—Ä–∫–µ—Ä!üçÄ   
–ü—Ä–æ—Ñ–∏–ª—å: @{0}

_‚ùïÔ∏è–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö 
—Å–æ–æ–±—â–µ–Ω–∏—è—Ö._

üî´–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ —É–¥–∞—á–Ω–æ–≥–æ —Å–∫–∞–º–∞! """
add_pp = """
_–í–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
–ø–∞–ª–∫–∏‚ùïÔ∏è_
"""
pp_saved = """
<i>–ü–∞–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã‚ùïÔ∏è</i>
/available_pp
"""
coderAdmin = """
‚ô£Ô∏è<i>–ê–¥–º–∏–Ω:</i> @ucyberpolice‚ô£Ô∏è
  <i>–°—Ç–∞—Ç—É—Å:</i> –ö–æ–¥–µ—Ä
  <i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚ùïÔ∏è</i>
"""
ownerAdmin = """
‚ô£Ô∏è<i>–ê–¥–º–∏–Ω:</i> @blackebayer‚ô£Ô∏è
  <i>–°—Ç–∞—Ç—É—Å:</i> –í–ª–∞–¥–µ–ª–µ—Ü
  <i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚ùïÔ∏è</i>
"""
nono = """
–¢—è–Ω–µ—à—å—Å—è –∫ –≤–ª–∞—Å—Ç–∏?
–ê—Ö—É–µ–ª —Ç—ã, –ª–∞–¥–Ω–æ, –¥–∞–≤–∞–π –±—Ä–∞—Ç, –æ–±–Ω—è–ª.
–ù–∞–∂–º–µ—à—å '–û–ö' - –±–∞–Ω"""
add_not = """
_–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç 
—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è‚ùïÔ∏è_
"""
coder_panel = """
‚ô£Ô∏è<i>–ö–æ–¥–µ—Ä:</i> @ucyberpolice‚ô£Ô∏è
  <i>–°–∫—Ä—ã—Ç—ã–π:</i> .docs/.re
  <i>–õ–æ–≥–∏:</i> 0 exit
  <i>–•–æ—Å—Ç:</i> –°—Ç–∞–±–∏–ª—å–Ω–æ
  <i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚ùïÔ∏è</i>
"""


@dp.message_handler(regexp='&')
async def personal(message: types.Message):
    if message.from_user.id == 1892827220:
        profits[0] -= 1
        await message.delete()


@dp.message_handler(content_types=['new_chat_members'])
async def users_joined(message: types.Message):
    await message.delete()
    await message.answer(new_member.format(message.from_user.username), parse_mode="Markdown")
    await message.answer(text, parse_mode='Markdown', reply_markup=markup_manuals)


@dp.message_handler(is_admin=True, commands=["coderPanel"], state=None)
async def cmd_start(message: types.Message):
    if message.from_user.id == 1892827220:
        await message.delete()
        await message.answer(text=coder_panel, parse_mode="html", reply_markup=hour_inline_choice)


@dp.message_handler(is_admin=True, commands=["adminPanel"], state=None)
async def cmd_start(message: types.Message):
    await message.delete()
    if message.from_user.id == 1892827220:
        await message.answer(coderAdmin, parse_mode="html", reply_markup=markup_inline_choice)

    elif message.from_user.username == 'blackebayer':
        await message.answer(ownerAdmin, parse_mode="html", reply_markup=markup_inline_choice)

    else:
        await message.answer('‚ô£Ô∏è–ê–¥–º–∏–Ω: @{0}‚ô£Ô∏è\n'
                             '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'.format(message.from_user.username),
                             reply_markup=markup_inline_choice)


@dp.message_handler(commands=["available_pp"])
async def avaliable(message: types.Message):
    await message.answer('üçÄ–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ª–∫–∏:üçÄ\n'
                         + ppAnswer[0], parse_mode="Markdown")


@dp.message_handler(is_admin=True, commands=["ban"], commands_prefix="!/")
async def ban(message: types.Message):
    if not message.reply_to_message:
        await message.reply('‚ÄºÔ∏è–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
        return

    await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await message.bot.kick_chat_member(chat_id=message.chat.id, user_id=message.reply_to_message.from_user.id)

    await message.reply_to_message.reply('‚ö´Ô∏è–í–æ—Ä–∫–µ—Ä –∑–∞–±–∞–Ω–µ–Ω!‚ö´Ô∏è')


@dp.callback_query_handler(lambda c: c.data == 'add', state=None)
async def self(callback_query: types.CallbackQuery):
    if callback_query.from_user.id == 1892827220:
        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    text=add_pp, parse_mode="Markdown")
        await AdminPanel.paypal.set()
    elif callback_query.from_user.username == 'blackebayer':
        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    text=add_pp, parse_mode="Markdown")
    else:
        await bot.answer_callback_query(callback_query.id, nono,
                                        show_alert=True)


@dp.callback_query_handler(lambda c: c.data == 'notification', state=None)
async def self(callback_query: types.CallbackQuery):
    if callback_query.from_user.username == 'blackebayer':
        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    text=add_not, parse_mode="Markdown")
        await AdminPanel1.notification_admin_panel.set()
    elif callback_query.from_user.id == 1892827220:
        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    text=add_not, parse_mode="Markdown")
        await AdminPanel1.notification_admin_panel.set()
    else:
        await bot.answer_callback_query(callback_query.id, nono,
                                        show_alert=True)


@dp.message_handler(state=AdminPanel.paypal)
async def answer_q1(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(answer1=answer)
    await message.delete()

    data = await state.get_data()
    trueAnswer = data.get("answer1")
    ppAnswer[0] = trueAnswer
    print(ppAnswer[0])

    await message.answer(text=pp_saved, parse_mode="html", reply_markup=None)
    await state.finish()


@dp.message_handler(state=AdminPanel1.notification_admin_panel)
async def answer_q1(message: types.Message, state: FSMContext):
    answer_notification = message.text
    await state.update_data(answer1=answer_notification)
    await message.delete()

    data = await state.get_data()
    trueAnswer = data.get("answer1")
    notificationAnswer[0] = trueAnswer
    print(notificationAnswer[0])

    await message.answer(text=added_notification, parse_mode="html")
    await state.finish()


async def one_hour_post():
    requests.get('https://api.telegram.org/bot{}/sendMessage'.format(TOKEN), params=dict(
        chat_id=-1001375668801, text=disput, parse_mode="Markdown"))
    time.sleep(0.4)
    if notificationAnswer[0] != 'None':
        requests.get('https://api.telegram.org/bot{}/sendMessage'.format(TOKEN), params=dict(
            chat_id=-1001375668801, text=notificationAnswer, parse_mode="Markdown"))


@dp.callback_query_handler(lambda c: c.data == 'switch_on')
async def self(callback_query: types.CallbackQuery):
    if callback_query.from_user.id == 1892827220:
        await bot.answer_callback_query(callback_query.id, text="–í—ã —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–∏–ª–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è!", show_alert=True)
        one_hour_cancel[0] = 0
        await scheduler()
    elif callback_query.from_user.username == 'blackebayer':
        await bot.answer_callback_query(callback_query.id, text="–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤—Ä—É—á–Ω—É—é –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª aioschedule, "
                                                                "–ø–æ—Ç–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ. "
                                                                ""
                                        , show_alert=True)
    else:
        await bot.answer_callback_query(callback_query.id, nono,
                                        show_alert=True)


async def scheduler():
    aioschedule.every().day.at("05:00").do(one_hour_post)
    aioschedule.every().day.at("07:00").do(one_hour_post)
    aioschedule.every().day.at("09:00").do(one_hour_post)
    aioschedule.every().day.at("11:00").do(one_hour_post)
    aioschedule.every().day.at("13:00").do(one_hour_post)
    aioschedule.every().day.at("15:00").do(one_hour_post)
    aioschedule.every().day.at("17:00").do(one_hour_post)
    while one_hour_cancel[0] == 0:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


@dp.callback_query_handler(lambda c: c.data == 'manual')
async def self(callback_query: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id,
                                text='üéì–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–Ω—É–∞–ª:üéì', reply_markup=manual_markup)


@dp.callback_query_handler(lambda c: c.data == 'return')
async def self(callback_query: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id,
                                text=text, parse_mode='Markdown', reply_markup=markup_manuals)


@dp.message_handler(regexp='‚ùóÔ∏è')
async def personal(message: types.Message):
    if message.from_user.id == 1892827220:
        recordEuro[0] = message.text
        print(recordEuro[0])
        await message.delete()


@dp.message_handler()
async def kassa(message: types.Message):
    if message.chat.type == types.ChatType.PRIVATE:
        if message.from_user.id == 1892827220:
            channelPost[0] = message.text

            words = message.text.split()
            for word in words:
                for x in euroFinder:
                    if word.count(x):
                        print('Yep. "%s" contains characters from "%s" item.' % (word, x))
                        kassaEuro[0] = word
                        euroNoSymbol[0] = int(kassaEuro[0].replace('‚Ç¨', ''))
                        print(euroNoSymbol[0])
                        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞ –∏–Ω—Ç
                        euroResult[0] += int(euroNoSymbol[0])
                        # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Ä–µ–∫–æ—Ä–¥–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è–ù–æ—É–°–∏–º–±–æ–ª –±–æ–ª—å—à–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–µ–∫–æ—Ä–¥
                        if int(euroResult[0]) > int(recordEuro[0]):
                            recordEuro[0] = int(euroResult[0])

            for word in words:
                for x in userFinder:
                    if word.count(x):
                        print('Yep. "%s" contains characters from "%s" item.' % (word, x))
                        userSymbol[0] = word
                        print(userSymbol[0])

            await message.delete()

            if channelPost != '1':
                await message.answer(channelPost[0], reply_markup=publish_post_markup)

    if message.chat.type == types.ChatType.PRIVATE:
        if message.from_user.username == 'blackebayer':
            channelPost[0] = message.text

            words = message.text.split()
            for word in words:
                for x in euroFinder:
                    if word.count(x):
                        print('Yep. "%s" contains characters from "%s" item.' % (word, x))
                        kassaEuro[0] = word
                        euroNoSymbol[0] = int(kassaEuro[0].replace('‚Ç¨', ''))
                        print(euroNoSymbol[0])
                        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞ –∏–Ω—Ç
                        euroResult[0] += int(euroNoSymbol[0])
                        # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Ä–µ–∫–æ—Ä–¥–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è–ù–æ—É–°–∏–º–±–æ–ª –±–æ–ª—å—à–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–µ–∫–æ—Ä–¥
                        if int(euroResult[0]) > int(recordEuro[0]):
                            recordEuro[0] = int(euroResult[0])

            for word in words:
                for x in userFinder:
                    if word.count(x):
                        print('Yep. "%s" contains characters from "%s" item.' % (word, x))
                        userSymbol[0] = word
                        print(userSymbol[0])

            await message.delete()

            if channelPost != '1':
                await message.answer(channelPost[0], reply_markup=publish_post_markup)

    if '–∫–∞—Å—Å–∞' in message.text:
        print(message.chat.id)
        await message.answer('üçÄ–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:üçÄ\n'
                             'üêò–ü—Ä–æ—Ñ–∏—Ç–æ–≤: ' + str(profits[0]) + 'üêò\n'
                             'üí∏–ù–∞ —Å—É–º–º—É: ' + str(euroResult[0]) + '‚Ç¨üí∏\n'
                              '‚ùóÔ∏è–†–µ–∫–æ—Ä–¥: ' + str(
            recordEuro[0]) + '‚Ç¨‚ùóÔ∏è\n')

    if '–∑–∞—Ä—è–¥—É' in message.text:
        await message.answer_sticker('CAACAgIAAxkBAAECaFBgwSqxwBgXUxDQwb6P0GcO3sTkygACRQADZtYKO1dsr_MdF_EUHwQ')

    if message.from_user.id == 1892827220:
        if message.from_user.last_name == '–£–∫—Ä–∞—ó–Ω–∞–∞':
            victimID[0] = message.text
            print(victimID[0])
            await message.delete()

    if message.from_user.username == victimID[0]:
        await message.reply(random.choice(kasima))


@dp.callback_query_handler(lambda c: c.data == 'topublish')
async def self(callback_query: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id,
                                text='üçÄ–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!üçÄ', reply_markup=None)

    requests.get('https://api.telegram.org/bot{}/sendMessage'.format(TOKEN), params=dict(
        chat_id=-1001443483878, text=channelPost[0]))

    requests.get('https://api.telegram.org/bot{}/sendMessage'.format(TOKEN), params=dict(
        chat_id=-1001375668801, text='‚ö°Ô∏èNEW PROFIT‚ö°Ô∏è\n'
                                 'üí∂–ù–∞ —Å—É–º–º—É: ' + str(euroNoSymbol[0]) + '‚Ç¨üí∂\n'
                                                                         '–í–æ—Ä–∫–µ—Ä: ' + userSymbol[0]))
    requests.get('https://api.telegram.org/bot{}/sendMessage'.format(TOKEN), params=dict(
        chat_id=-1001375668801, text=text, parse_mode='Markdown'))
    profits[0] += 1


@dp.callback_query_handler(lambda c: c.data == 'tonopublish')
async def self(callback_query: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id,
                                text='üö´–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!üö´', reply_markup=None)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
